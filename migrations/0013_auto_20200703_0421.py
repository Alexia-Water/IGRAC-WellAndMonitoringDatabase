# Generated by Django 2.2.12 on 2020-07-03 04:21

import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('gwml2', '0012_auto_20200703_0159'),
    ]

    operations = [
        migrations.CreateModel(
            name='AquiferTypeTerm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ConductivityConfinementTypeTerm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GWAquifer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gw_aquifer_is_exploited', models.BooleanField(blank=True, help_text='Denotes whether groundwater from the hydrogeological unit is being exploited by wells or other intakes (after INSPIRE, 2013).', null=True, verbose_name='GWAquiferIsExploited')),
                ('gw_aquifer_is_main', models.BooleanField(blank=True, help_text='Denotes whether the unit is primary in anAquifer System (after INSPIRE, 2013).', null=True, verbose_name='GWAquiferIsMain')),
                ('gw_aquifer_type', models.ForeignKey(blank=True, help_text='Water in an Aquifer is, or is not, under pressure.Based on that, several aquifer types can bedistinguished: unconfined, confined, artesian,subartesian, or aquitard (after INSPIRE, 2013).', null=True, on_delete=django.db.models.deletion.SET_NULL, to='gwml2.AquiferTypeTerm', verbose_name='GWAquiferType')),
            ],
        ),
        migrations.CreateModel(
            name='GWAquiferSystem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gw_aquifer_system_is_layered', models.BooleanField(blank=True, help_text='True if this aquifer / system is a layered system.(after INSPIRE, 2013).', null=True, verbose_name='gwAquiferSystemIsLayered')),
            ],
        ),
        migrations.CreateModel(
            name='PorosityTypeTerm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SpatialConfinementTypeTerm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UnitPropertyTerm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GWWaterBudget',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gw_budget_valid_time', models.DateTimeField(blank=True, help_text='Valid time of this budget (e.g., 2010).', null=True, verbose_name='GWBudgetValidTime')),
                ('gw_budget_amount', models.ForeignKey(blank=True, help_text='Final quantity (sum) of the budget. If recharge =discharge, the sum is 0.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='gwml2.Quantity', verbose_name='GWBudgetAmount')),
                ('gw_budget_discharge', models.ManyToManyField(help_text='Discharge (outflows) considered in the budget.', to='gwml2.GWDischarge', verbose_name='GWBudgetDischarge')),
                ('gw_budget_recharge', models.ManyToManyField(help_text='Recharge (inflows) considered by the budget.', to='gwml2.GWRecharge', verbose_name='GWBudgetRecharge')),
            ],
        ),
        migrations.CreateModel(
            name='GWUnitProperties',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gw_unit_property_value', models.TextField(help_text='The value of the hydrogeological unit property.', verbose_name='gwUnitPropertyValue')),
                ('gw_unit_property', models.ForeignKey(help_text='The type of hydrogeological unit property, e.g. average well depth.', on_delete=django.db.models.deletion.CASCADE, to='gwml2.UnitPropertyTerm', verbose_name='gwUnitProperty')),
            ],
        ),
        migrations.CreateModel(
            name='GWPorosity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gw_porosity', models.ForeignKey(blank=True, help_text='Measure of the proportion of the volume occupied by specific voids over the total volume of material including the voids.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='gwml2.Quantity', verbose_name='GWPorosity')),
                ('gw_porosity_type', models.ForeignKey(blank=True, help_text='Type of porosity (primary, secondary, dual, specific, effective, granular, fractured, karstic, etc.)', null=True, on_delete=django.db.models.deletion.SET_NULL, to='gwml2.PorosityTypeTerm', verbose_name='GWPorosityType')),
            ],
        ),
        migrations.CreateModel(
            name='GWHydrogeoUnit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gw_unit_discharge', models.ManyToManyField(help_text='Volumetric flow rate of water that goes out of an hydrogeologic unit, at potentially multiple locations.', to='gwml2.GWDischarge', verbose_name='GWUnitDischarge')),
                ('gw_unit_media', models.ForeignKey(blank=True, help_text='Type of material or, by proximity, type of voids (e.g. granular, fracture, karstic, or mixed).', null=True, on_delete=django.db.models.deletion.SET_NULL, to='gwml2.PorosityTypeTerm', verbose_name='GWUnitMedia')),
                ('gw_unit_recharge', models.ManyToManyField(help_text='Volumetric flow rate of water that enters an hydrogeologic unit, at potentially multiple locations.', to='gwml2.GWRecharge', verbose_name='GWUnitRecharge')),
                ('gw_unit_vulnerability', models.ManyToManyField(blank=True, help_text='The susceptibility of the aquifer to specific threats such as various physical events (earthquakes), human processes (depletion), etc.', null=True, to='gwml2.GWVulnerability', verbose_name='gwUnitVulnerability')),
                ('gw_unit_water_budget', models.ForeignKey(blank=True, help_text='Sum of water input and output of a hydrogeologic unit, at a particular point in time, with a description of inflows and outflows.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='gwml2.GWWaterBudget', verbose_name='GWUnitWaterBudget')),
                ('properties', models.ManyToManyField(blank=True, help_text='Additional properties', null=True, to='gwml2.GWUnitProperties', verbose_name='Properties')),
            ],
        ),
        migrations.CreateModel(
            name='GWDivide',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gw_divide_shape', django.contrib.gis.db.models.fields.GeometryField(help_text='Shape / position of the divide (line, plane or point) intersecting a fluid body surface.', srid=4326, verbose_name='GWDivideShape')),
                ('gw_flow_system', models.ManyToManyField(help_text='Flow system on each side of the divide.', to='gwml2.GWFlowSystem', verbose_name='GWFlowSystem')),
            ],
        ),
        migrations.CreateModel(
            name='GWConfiningBed',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gw_conductivity_confinement', models.ForeignKey(blank=True, help_text='Degree of spatial confinement (typically:"Unconfined-Confined", "Partially Confined").', null=True, on_delete=django.db.models.deletion.SET_NULL, to='gwml2.ConductivityConfinementTypeTerm', verbose_name='GWConductivityConfinement')),
                ('gw_spatial_confinement', models.ForeignKey(blank=True, help_text='Degree of hydraulic confinement (e.g. aquiclude).', null=True, on_delete=django.db.models.deletion.SET_NULL, to='gwml2.SpatialConfinementTypeTerm', verbose_name='gwSpatialConfinement')),
            ],
        ),
        migrations.CreateModel(
            name='GWBasin',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gw_divide', models.ManyToManyField(help_text='“Line on a water table or piezometric surface on either side of which the groundwater flow diverges“ (IGH0556).', to='gwml2.GWDivide', verbose_name='GWDivide')),
            ],
        ),
        migrations.CreateModel(
            name='GWAquiferUnit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gw_aquifer', models.ForeignKey(blank=True, help_text='An aquifer is a type of aquifer-related unit.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='gwml2.GWAquifer', verbose_name='GWAquifer')),
                ('gw_aquifer_system', models.ManyToManyField(blank=True, help_text='An aquifer system is a type of aquifer-related unit.', null=True, to='gwml2.GWAquiferSystem', verbose_name='GWAquiferSystem')),
                ('gw_confining_bed', models.ForeignKey(blank=True, help_text='A confining bed is a type of aquifer-related unit.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='gwml2.GWConfiningBed', verbose_name='GWConfiningBed')),
            ],
        ),
        migrations.AddField(
            model_name='gwaquifer',
            name='gw_confining_bed',
            field=models.ManyToManyField(blank=True, help_text='Relates an aquifer and its confining beds.', null=True, to='gwml2.GWConfiningBed', verbose_name='GWConfiningBed'),
        ),
    ]
